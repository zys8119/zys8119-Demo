var B=Object.defineProperty;var E=(r,h,f)=>h in r?B(r,h,{enumerable:!0,configurable:!0,writable:!0,value:f}):r[h]=f;var c=(r,h,f)=>(E(r,typeof h!="symbol"?h+"":h,f),f);import{C as q}from"./CanvasInteraction-b948aae7.js";import{d as A,o as J,c as N,m as V,u as z,_ as C}from"./index-c8844952.js";import"./index-16a5a20c.js";import"./index-4bda97c0.js";const F={class:"PathRecognition"},G=A({__name:"PathRecognition",setup(r){const h=function(s,o,l){return!(o<s.x||o>s.x+s.width||l<s.y||l>s.y+s.height)},f=async({ObjectsClass:s,scene:o,ObjectBase:l})=>{const R=new s.Rect("#f00",50,60,100,100);o.push(R);const I=new s.Rect("#0032ff",500,500,500,500);o.push(I),o.push(new s.Rect("#0ab700",200,100,150,200)),o.push(new s.Rect("#f500d5",400,100,200,500));const k=o.filter(_=>_.type!=="line"),g=([_,y])=>k.find(t=>h(t,_,y));class L extends l{constructor(t=0,i=0,n=0,e=0){super();c(this,"type","line");c(this,"x",0);c(this,"y",0);c(this,"w",0);c(this,"h",0);c(this,"lineWidth",2);c(this,"points",[]);c(this,"ctx");this.sx=t,this.sy=i,this.ex=n,this.ey=e,this.updatePoints()}get width(){return Math.abs(this.sx-this.ex)}get height(){return Math.abs(this.sy-this.ey)}getDistance([t,i]){const n=Math.abs(t-this.ex),e=Math.abs(i-this.ey);return Math.sqrt(Math.pow(n,2)+Math.pow(e,2))}async getPoint(t=[],i=this.sx,n=this.sy,e=-1,m=new Map,S=[]){const p=[[i,n-1],[i+1,n],[i,n+1],[i-1,n]];let u=p[e];const T=S.some(a=>g(a)),x=p.filter(a=>!g(a)&&!m.has(a.toString())),d=p.map(a=>this.getDistance(a)),b=Math.min.apply(null,d),w=d.indexOf(b);if(e===-1&&(u=p[w],e=w),i===this.ex&&n===this.ey)return t;if(e!==-1&&g(u)&&!g([i,n])||T&&x.length===3||!g(p[w])&&(i===this.ex||n===this.ey)){const a=x.map(W=>this.getDistance(W)),D=Math.min.apply(null,a),P=d.indexOf(D);u=p[P],e=P}const[M,v]=u;m.set(u.toString(),!0),t.push(u);try{await this.getPoint(t,M,v,e,m,p)}catch{return setTimeout(()=>{this.getPoint(t,M,v,e,m,p)}),t}return t}async updatePoints(){this.points=await this.getPoint()}async draw(t,i){this.ctx=t,t.beginPath(),t.strokeStyle="#ff8000",t.lineJoin="round",t.lineWidth=this.lineWidth,t.moveTo(this.sx,this.sy),this.points.forEach(([n,e])=>{t.lineTo(n,e)}),t.lineTo(this.ex,this.ey),t.stroke()}}o.push(new L(100,150,805,457))};return(s,o)=>(J(),N("div",F,[V(z(q),{onLoad:f})]))}});const Y=C(G,[["__scopeId","data-v-3c025fb5"]]);export{Y as default};
